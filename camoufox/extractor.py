import pprint
from camoufox.sync_api import Camoufox
import time

def run():
    """
    Launches a browser using Camoufox to automatically solve the Datadome challenge,
    captures headers, and exports them to a Python file (base_headers.py).
    """
    try:
        # --- Launch browser with Camoufox using the context manager ---
        print("üöÄ Launching browser with Camoufox...")
        with Camoufox(headless="virtual") as browser:
            page = browser.new_page()

            # --- Set up header capture BEFORE navigation ---
            print("Setting up header capture...")
            captured_headers = {}

            def capture_request_headers(request):
                """Captures headers from requests."""
                # More flexible condition - capture from main document requests
                if request.resource_type == "document" and "idealista.com" in request.url:
                    print(f"üì¶ Capturing headers from: {request.url}")
                    captured_headers.update(request.headers)

            # Add the listener before any navigation
            page.on("request", capture_request_headers)

            print("Navigating to https://www.idealista.com/...")
            # Initial navigation - this should trigger header capture
            page.goto(
                "https://www.idealista.com/alquiler-viviendas/madrid-madrid/",
                timeout=120000,
                wait_until="networkidle",
            )
            print("\n‚úÖ Successfully navigated past the Datadome challenge!")

            # --- If no headers captured on first load, try a reload ---
            if not captured_headers:
                print("No headers captured on initial load. Attempting reload...")
                page.reload(wait_until="networkidle")
                # Give a moment for the request to complete
                time.sleep(2)

            # Remove the listener
            page.remove_listener("request", capture_request_headers)

            if not captured_headers:
                raise RuntimeError("Failed to capture headers. No requests intercepted.")

            print(f"‚úÖ Captured {len(captured_headers)} headers.")

            # --- Enhance Headers with Cookies ---
            print("Adding cookies to headers...")
            # Get cookies from the page context, not the browser
            all_cookies = page.context.cookies()
            if all_cookies:
                captured_headers["cookie"] = "; ".join(
                    f"{cookie['name']}={cookie['value']}" for cookie in all_cookies
                )
                print(f"‚úÖ Added {len(all_cookies)} cookies to headers.")

            # Clean up headers managed by HTTP clients
            headers_to_remove = ["host", "connection", "content-length", "content-encoding"]
            for header in headers_to_remove:
                captured_headers.pop(header, None)

            print("‚úÖ Headers captured and cleaned successfully.")

            # --- Export headers to a Python file ---
            print("Saving headers to base_headers.py...")
            with open("base_headers.py", "w", encoding="utf-8") as f:
                f.write("# Auto-generated browser headers using Camoufox.\n\n")
                f.write("BASE_HEADERS = \\\n")
                f.write(pprint.pformat(captured_headers, width=120))
                f.write(
                    "\n\n# Note: This file is automatically generated and will be overwritten.\n"
                )

            print("‚úÖ Headers saved to base_headers.py.")
            print("\nClosing the browser...")

    except Exception as e:
        print(f"\n‚ùå An error occurred: {e}")
        print("Please ensure you have run 'playwright install' in your terminal.")
    finally:
        print("‚úÖ Browser session finished.")

if __name__ == "__main__":
    run()